{"version":3,"sources":["components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["Todo","todo","selectedUserId","selectUser","handleChecked","type","checked","completed","readOnly","onChange","id","title","className","classNames","userId","onClick","TodoList","state","search","status","handleChange","event","setState","target","value","handleSelect","todos","this","props","randomizeTodos","statusArr","filter","toLowerCase","includes","htmlFor","name","map","option","key","React","Component","BASE_URL","CurrentUser","user","loadData","prevProps","fetch","then","response","json","data","email","phone","App","todoId","prevState","sort","Math","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be34f2cf.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Todo = ({ todo, selectedUserId, selectUser, handleChecked }) => (\n  <>\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        readOnly\n        onChange={() => handleChecked(todo.id)}\n      />\n      <p>{todo.title}</p>\n    </label>\n\n    <button\n      className={classNames(\n        'button',\n        'TodoList__user-button',\n        {\n          'TodoList__user-button--selected': selectedUserId === todo.userId,\n        },\n      )}\n      type=\"button\"\n      onClick={() => selectUser(todo.userId)}\n    >\n      {`User #${todo.userId}`}\n    </button>\n  </>\n);\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  handleChecked: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\n\nexport class TodoList extends React.Component {\n  state = {\n    search: '',\n    status: '',\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  handleSelect = (event) => {\n    this.setState({\n      status: event.target.value,\n    });\n  }\n\n  render() {\n    let { todos } = this.props;\n    const {\n      selectedUserId,\n      selectUser,\n      handleChecked,\n      randomizeTodos,\n    } = this.props;\n    const { search, status } = this.state;\n    const statusArr = ['all', 'active', 'complited'];\n\n    todos = todos.filter(\n      (todo) => {\n        switch (status) {\n          case statusArr[1]:\n            return !todo.completed;\n          case statusArr[2]:\n            return todo.completed;\n          default:\n            return todo;\n        }\n      },\n    ).filter(\n      todo => todo.title.toLowerCase().includes(search.toLowerCase()),\n    );\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <div className=\"TodoList__filter\">\n            <label htmlFor=\"search\">\n              Search\n              <input\n                type=\"text\"\n                id=\"search\"\n                value={search}\n                onChange={this.handleChange}\n              />\n            </label>\n\n            <label htmlFor=\"complite\">\n              Complite\n              <select\n                name=\"complite\"\n                id=\"complite\"\n                value={status}\n                onChange={this.handleSelect}\n              >\n                {statusArr.map(option => (\n                  <option\n                    key={option}\n                    value={option}\n                  >\n                    {option}\n                  </option>\n                ))}\n              </select>\n            </label>\n\n            <button\n              className=\"button\"\n              type=\"submit\"\n              onClick={randomizeTodos}\n            >\n              Randomize\n            </button>\n          </div>\n\n          <ul className=\"TodoList__list\">\n\n            {todos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  },\n                )}\n              >\n                <Todo\n                  todo={todo}\n                  selectedUserId={selectedUserId}\n                  selectUser={selectUser}\n                  handleChecked={handleChecked}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number,\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n  })).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  handleChecked: PropTypes.func.isRequired,\n  randomizeTodos: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUser(userId) {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user: { ...user.data } });\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n    const { selectUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"submit\"\n          onClick={() => selectUser(0)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos: todos.data,\n        });\n      });\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({\n      selectedUserId,\n    });\n  }\n\n  handleChecked = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  randomizeTodos = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.sort(() => Math.random() - 0.5),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            selectUser={this.selectUser}\n            handleChecked={this.handleChecked}\n            randomizeTodos={this.randomizeTodos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                selectUser={this.selectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}