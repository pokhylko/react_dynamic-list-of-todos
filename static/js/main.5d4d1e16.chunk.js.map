{"version":3,"sources":["components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["Todo","todo","selectedUserId","selectUser","handleChecked","type","checked","completed","readOnly","onChange","id","title","className","classNames","userId","onClick","defaultProps","PropTypes","null","STATUS","TodoList","state","search","status","handleChange","event","setState","target","value","handleSelect","getFilteredTodos","todos","props","filter","toLowerCase","includes","this","randomizeTodos","htmlFor","name","map","key","React","Component","BASE_URL","CurrentUser","user","loadData","prevProps","fetch","then","response","json","data","email","phone","App","todoId","prevState","sort","Math","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d4d1e16.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Todo = ({ todo, selectedUserId, selectUser, handleChecked }) => (\n  <>\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        readOnly\n        onChange={() => handleChecked(todo.id)}\n      />\n      <p>{todo.title}</p>\n    </label>\n\n    <button\n      className={classNames(\n        'button',\n        'TodoList__user-button',\n        {\n          'TodoList__user-button--selected': selectedUserId === todo.userId,\n        },\n      )}\n      type=\"button\"\n      onClick={() => selectUser(todo.userId)}\n    >\n      {`User #${todo.userId}`}\n    </button>\n  </>\n);\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  selectedUserId: PropTypes.number,\n  selectUser: PropTypes.func.isRequired,\n  handleChecked: PropTypes.func.isRequired,\n};\n\nTodo.defaultProps = {\n  selectedUserId: PropTypes.null,\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\n\nconst STATUS = {\n  all: 'all',\n  active: 'active',\n  complited: 'complited',\n};\n\nexport class TodoList extends React.Component {\n  state = {\n    search: '',\n    status: STATUS.all,\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  handleSelect = (event) => {\n    this.setState({\n      status: event.target.value,\n    });\n  }\n\n  getFilteredTodos = () => {\n    const { todos } = this.props;\n    const { search, status } = this.state;\n\n    return todos.filter(\n      (todo) => {\n        switch (status) {\n          case STATUS.active:\n            return !todo.completed;\n          case STATUS.complited:\n            return todo.completed;\n          default:\n            return todo;\n        }\n      },\n    ).filter(\n      todo => todo.title.toLowerCase().includes(search.toLowerCase()),\n    );\n  }\n\n  render() {\n    const {\n      selectedUserId,\n      selectUser,\n      handleChecked,\n      randomizeTodos,\n    } = this.props;\n    const { search, status } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <div className=\"TodoList__filter\">\n            <label htmlFor=\"search\">\n              Search\n              <input\n                type=\"text\"\n                id=\"search\"\n                value={search}\n                onChange={this.handleChange}\n              />\n            </label>\n\n            <label htmlFor=\"complite\">\n              Complite\n              <select\n                name=\"complite\"\n                id=\"complite\"\n                value={status}\n                onChange={this.handleSelect}\n              >\n                <option value={STATUS.all}>{STATUS.all}</option>\n                <option value={STATUS.active}>{STATUS.active}</option>\n                <option value={STATUS.complited}>{STATUS.complited}</option>\n              </select>\n            </label>\n\n            <button\n              className=\"button\"\n              type=\"submit\"\n              onClick={randomizeTodos}\n            >\n              Randomize\n            </button>\n          </div>\n\n          <ul className=\"TodoList__list\">\n\n            {this.getFilteredTodos().map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  },\n                )}\n              >\n                <Todo\n                  todo={todo}\n                  selectedUserId={selectedUserId}\n                  selectUser={selectUser}\n                  handleChecked={handleChecked}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number,\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n  })).isRequired,\n  selectedUserId: PropTypes.number,\n  selectUser: PropTypes.func.isRequired,\n  handleChecked: PropTypes.func.isRequired,\n  randomizeTodos: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  selectedUserId: PropTypes.null,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUser(userId) {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user: { ...user.data } });\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n    const { selectUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"submit\"\n          onClick={() => selectUser(null)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: null,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos: todos.data,\n        });\n      });\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({\n      selectedUserId,\n    });\n  }\n\n  handleChecked = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  randomizeTodos = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.sort(() => Math.random() - 0.5),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            selectUser={this.selectUser}\n            handleChecked={this.handleChecked}\n            randomizeTodos={this.randomizeTodos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                selectUser={this.selectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}